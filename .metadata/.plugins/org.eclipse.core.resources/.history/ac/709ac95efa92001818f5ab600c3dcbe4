package com.teljdbc.service;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.teljdbc.dao.TelDao;
import com.teljdbc.po.Telephone;

/**
 * @Description: 业务类：负责业务处理
 * @author chaoling
 * @date 2018年7月29日下午1:38:29
 */
public class TelService {

	TelDao dao = new TelDao();
	
	public boolean addTel(Telephone telephone) {

		return dao.insert(telephone);

	}

	// 根据姓名删除电话本
	// 参数：String，代表的电话本
	// 返回值：false 此人不存在 true 删除成功
	public boolean deleteTelByName(String name) {
		int index = selectIndexByName(name);
		if (index == -1)
			return false;
		tels.remove(index);
		return true;

	}

	// 根据姓名更新电话本
	// 参数 Telephone int
	// 返回值 boolean
	public boolean updateTel(Telephone telephone, int index) {

		Telephone tel = tels.set(index, telephone);

		if (tel != null)
			return true;

		return false;
	}

	// 查询所有电话本业务
	// 参数：无参
	// 返回值：List<Telephone>
	public List<Telephone> selectAllTel() {

		return tels;
	}

	// 根据姓名查询
	// 参数：String
	// 返回值：Telephone
	public Telephone selectTelByName(String name) {

		// 1.得到此名字电话本的索引
		int index = selectIndexByName(name);

		// 如果不等于-1 找到了，返回具体的电话本
		if (index != -1) {
			return tels.get(index);
		}
		// 没找到，返回null
		return null;
	}

	public int selectIndexByName(String name) {

		// 遍历查找，存在返回索引
		for (int i = 0; i < tels.size(); i++) {
			if (tels.get(i).getName().equals(name))
				return i;
		}
		// 不存在返回-1
		return -1;
	}

	/**
	 * @Description: 初始化，即读入数据   
	 * @param pathname     
	 * @throws
	 */
	public void init() {
		
		dao.select();
	}
	/**
	 * 
	 * @Description: 写入操作
	 * @param pathname     
	 * @throws
	 */
	public void exit(String pathname) {
		
		BufferedWriter bw = null;
		
		try {
			bw = new BufferedWriter(new FileWriter(pathname));
			
			Iterator<Telephone> iterator = tels.iterator();
			
			while(iterator.hasNext()){
				bw.write(iterator.next().toString());
				bw.newLine();
				bw.flush();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if(bw !=null)
				try {
					bw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
		}
	}

}
